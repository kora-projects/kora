def nonOtherModules = new HashSet<String>()
nonOtherModules.add("internal")
nonOtherModules.add("internal:test-cassandra")
nonOtherModules.add("internal:test-kafka")
nonOtherModules.add("internal:test-logging")
nonOtherModules.add("internal:test-postgres")
nonOtherModules.add("internal:test-redis")

def getProjectFullName = { Project pj ->
    def fullName = pj.name
    def parent = pj.parent
    while (parent != null && parent.name != rootProject.name) {
        fullName = parent.name + ":" + fullName
        parent = parent.parent
    }
    return fullName
}

def addDependencies = { List<TaskProvider> taskProviders, String dependency ->
    taskProviders.forEach { taskProvider ->
        taskProvider.configure { Task task ->
            def taskPrefix = task.name.split("-")[0]
            task.dependsOn(":$dependency:$taskPrefix")
        }
    }
    nonOtherModules.add(dependency)
}

def addDependenciesByPattern = { List<TaskProvider> taskProviders, String namePattern ->
    rootProject.allprojects.forEach {
        if (it.name != rootProject.name && it.name.contains(namePattern) && !nonOtherModules.contains(it.name)) {
            def fullName = getProjectFullName(it)
            taskProviders.forEach { taskProvider ->
                taskProvider.configure { Task task ->
                    def taskPrefix = task.name.split("-")[0]
                    task.dependsOn(":$fullName:$taskPrefix")
                }
            }
            nonOtherModules.add(fullName)
        }
    }
}

def createTasks = { String type ->
    def classesByType = tasks.register("classes-$type") {
        group("build")
        description("Build classes for $type")
    }

    def testClassesByType = tasks.register("testClasses-$type") {
        group("build")
        description("Build testClasses for $type")
    }

    def testByType = tasks.register("test-$type") {
        group("verification")
        description("Run tests with $type")
    }

    def javadocByType = tasks.register("javadoc-$type") {
        group("documentation")
        description("Javadoc for $type")
    }

    return [classesByType, testClassesByType, testByType, javadocByType]
}

def tasksPostgres = createTasks("postgres")
def tasksCassandra = createTasks("cassandra")
def tasksRedis = createTasks("redis")
def tasksKafka = createTasks("kafka")
def tasksOpenapi = createTasks("openapi")
def tasksCodegenJava = createTasks("codegen-java")
def tasksCodegenKotlin = createTasks("codegen-kotlin")
def tasksOther = createTasks("other")

// Postgres
addDependencies(tasksPostgres, "database:database-common")
addDependencies(tasksPostgres, "database:database-jdbc")
addDependencies(tasksPostgres, "database:database-jdbi")
addDependencies(tasksPostgres, "database:database-r2dbc")
addDependencies(tasksPostgres, "database:database-vertx")
addDependencies(tasksPostgres, "database:database-flyway")
addDependencies(tasksPostgres, "database:database-liquibase")
addDependencies(tasksPostgres, "experimental:camunda-engine-bpmn")

// Cassandra
addDependencies(tasksCassandra, "database:database-cassandra")

// Redis
addDependencies(tasksRedis, "cache:cache-redis")

// Kafka
addDependencies(tasksKafka, "kafka:kafka")

// OpenAPI
addDependencies(tasksOpenapi, "openapi:openapi-generator")
addDependencies(tasksOpenapi, "openapi:openapi-management")

// Codegen Java
addDependenciesByPattern(tasksCodegenJava, "annotation-processor")
addDependencies(tasksCodegenJava, "mapstruct:mapstruct-java-extension")

// Codegen Kotlin
addDependenciesByPattern(tasksCodegenKotlin, "symbol-processor")
addDependenciesByPattern(tasksCodegenKotlin, "ksp")
addDependencies(tasksCodegenKotlin, "scheduling:scheduling-ksp")
addDependencies(tasksCodegenKotlin, "mapstruct:mapstruct-ksp-extension")

def jacocoRootReport = tasks.register("jacocoRootReport", JacocoReport) {
    group = "verification"
    executionData project.fileTree(dir: ".", include: "**/build/jacoco/test.exec")

    reports {
        xml.required.set(true)
        xml.destination(file("$buildDir/reports/jacoco/test/jacocoTestReport.xml"))
        csv.required.set(false)
        html.required.set(false)
    }
}

rootProject.allprojects.forEach {
    if (it.name != rootProject.name && it.name != "maven-parent" && it.childProjects.isEmpty()) {
        def fullName = getProjectFullName(it)
        if (!nonOtherModules.contains(fullName)) {
            addDependencies(tasksOther, fullName)
        }
    }
}

subprojects {
    tasks.configureEach { dependency ->
        if (dependency.name == "jacocoTestReport") {
            def report = (JacocoReport) dependency
            jacocoRootReport.configure { root ->
                root.additionalClassDirs report.allClassDirs
                root.additionalSourceDirs report.allSourceDirs
            }
        }
    }
}
