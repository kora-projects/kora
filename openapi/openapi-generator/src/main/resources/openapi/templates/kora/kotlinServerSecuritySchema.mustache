/**
 * NOTE: This class is auto generated by Kora OpenAPI Generator (https://openapi-generator.tech) ({{{generatorVersion}}}).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package {{apiPackage}}

import java.util.function.Function

import ru.tinkoff.kora.common.Context
import ru.tinkoff.kora.common.Module
import ru.tinkoff.kora.common.Tag
import ru.tinkoff.kora.common.DefaultComponent
import ru.tinkoff.kora.common.Principal
import ru.tinkoff.kora.config.common.extractor.ConfigValueExtractor
import ru.tinkoff.kora.config.common.Config
import ru.tinkoff.kora.http.server.common.HttpServerInterceptor
import ru.tinkoff.kora.http.server.common.HttpServerInterceptor.InterceptChain
import ru.tinkoff.kora.http.server.common.HttpServerRequest
import ru.tinkoff.kora.http.server.common.HttpServerResponse
import ru.tinkoff.kora.http.server.common.HttpServerResponseException

import ru.tinkoff.kora.http.common.auth.*
import ru.tinkoff.kora.http.server.common.auth.*



@ru.tinkoff.kora.common.annotation.Generated("openapi generator kora server")
@ru.tinkoff.kora.common.Module
public interface ApiSecurity {
{{#vendorExtensions.tags}}

    class {{.}} {}
{{/vendorExtensions.tags}}

{{#vendorExtensions.authMethods}}
    @ru.tinkoff.kora.common.annotation.Generated("openapi generator kora server")
    class {{name}}HttpServerInterceptor(
        {{#methods}}  @Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}::class) val {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}: HttpServerPrincipalExtractor<{{#isOAuth}}PrincipalWithScopes{{/isOAuth}}{{^isOAuth}}Principal{{/isOAuth}}>{{^vendorExtensions.isLast}},
        {{/vendorExtensions.isLast}}{{/methods}}
    ) : HttpServerInterceptor {

        override fun intercept(ctx: Context, request: HttpServerRequest, chain: InterceptChain): HttpServerResponse {
{{#methods}}{{#isApiKey}}{{#isKeyInHeader}}
            val {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.headers().getFirst("{{keyParamName}}"){{/isKeyInHeader}}{{#isKeyInQuery}}
            val {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_query = request.queryParams().get("{{keyParamName}}")
            val {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_query?.firstOrNull(){{/isKeyInQuery}}{{#isKeyInCookie}}
            val {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.cookies().filter { "{{keyParamName}}" == it.name() }.map { it.value() }.firstOrNull()
            {{/isKeyInCookie}}
            {{/isApiKey}}{{#isBasicBasic}}
            val {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.headers().getFirst("Authorization"){{/isBasicBasic}}{{#isBasicBearer}}
            val {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.headers().getFirst("Authorization"){{/isBasicBearer}}{{#isOAuth}}
            val {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.headers().getFirst("Authorization"){{/isOAuth}}
            val {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}} = this.{{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}.extract(request, {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token){{^isOAuth}}{{/isOAuth}}
            if ({{#lambda.camelcase}}{{name}}{{/lambda.camelcase}} != null) {
{{#isOAuth}}{{#vendorExtensions.hasScopes}}
                if (!{{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}.scopes().contains("{{scope}}")) {
                  throw HttpServerResponseException.of(403, "Forbidden")
                }
{{/vendorExtensions.hasScopes}}{{/isOAuth}}
                Principal.set(ctx, {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}})
                return chain.process(ctx, request)
            }
            {{#vendorExtensions.isLast}}
            throw HttpServerResponseException.of(403, "Forbidden")
            {{/vendorExtensions.isLast}}
{{/methods}}
        }
    }

    @Tag({{name}}::class)
    @DefaultComponent
    fun {{#lambda.camelcase}}{{name}}HttpServerAuthInterceptor{{/lambda.camelcase}}({{#methods}}
      @Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}::class) {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}: HttpServerPrincipalExtractor<{{#isOAuth}}PrincipalWithScopes{{/isOAuth}}{{^isOAuth}}Principal{{/isOAuth}}>{{^vendorExtensions.isLast}},
      {{/vendorExtensions.isLast}}{{/methods}}): {{name}}HttpServerInterceptor {
        return {{name}}HttpServerInterceptor({{#methods}}{{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}{{^vendorExtensions.isLast}}, {{/vendorExtensions.isLast}}{{/methods}})
    }

{{/vendorExtensions.authMethods}}

}
