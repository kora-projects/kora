/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) ({{{generatorVersion}}}).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package {{apiPackage}};

import java.util.function.Function;

import ru.tinkoff.kora.common.Context;
import ru.tinkoff.kora.common.Module;
import ru.tinkoff.kora.common.DefaultComponent;
import ru.tinkoff.kora.common.Tag;
import ru.tinkoff.kora.common.Principal;

import ru.tinkoff.kora.config.common.extractor.ConfigValueExtractor;
import ru.tinkoff.kora.config.common.Config;
import ru.tinkoff.kora.http.server.common.HttpServerInterceptor;
import ru.tinkoff.kora.http.server.common.HttpServerInterceptor.InterceptChain;
import ru.tinkoff.kora.http.server.common.HttpServerRequest;
import ru.tinkoff.kora.http.server.common.HttpServerResponse;
import ru.tinkoff.kora.http.server.common.HttpServerResponseException;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

import ru.tinkoff.kora.http.common.auth.*;
import ru.tinkoff.kora.http.server.common.auth.*;



@Module
@ru.tinkoff.kora.common.annotation.Generated("openapi generator kora client")
public interface ApiSecurity {
{{#vendorExtensions.tags}}
    static final class {{.}} {}
{{/vendorExtensions.tags}}

{{#vendorExtensions.authMethods}}
    static final class {{name}}HttpServerInterceptor implements HttpServerInterceptor { {{#methods}}
        private final HttpServerPrincipalExtractor<{{#isOAuth}}PrincipalWithScopes{{/isOAuth}}{{^isOAuth}}Principal{{/isOAuth}}> {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}};
    {{/methods}}
        public {{name}}HttpServerInterceptor(
        {{#methods}}  @Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}.class)
          HttpServerPrincipalExtractor<{{#isOAuth}}PrincipalWithScopes{{/isOAuth}}{{^isOAuth}}Principal{{/isOAuth}}> {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}{{^vendorExtensions.isLast}},
        {{/vendorExtensions.isLast}}{{/methods}}
        ) { {{#methods}}
            this.{{#lambda.camelcase}}{{name}}{{/lambda.camelcase}} = {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}};{{/methods}}
        }

        @Override
        public CompletionStage<HttpServerResponse> intercept(Context ctx, HttpServerRequest request, InterceptChain chain) {
        var future = new CompletableFuture<Principal>();{{#methods}}{{#isApiKey}}{{#isKeyInHeader}}
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.headers().getFirst("{{keyParamName}}");{{/isKeyInHeader}}{{#isKeyInQuery}}
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_query = request.queryParams().get("{{keyParamName}}");
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_query == null || {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_query.isEmpty()
              ? null
              : {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_query.iterator().next();
            {{/isKeyInQuery}}{{#isKeyInCookie}}
              throw new IllegalStateException("TODO");// TODO
            {{/isKeyInCookie}}
            {{/isApiKey}}{{#isBasicBasic}}
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.headers().getFirst("Authorization");
            {{/isBasicBasic}}{{#isBasicBearer}}
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.headers().getFirst("Authorization");
            {{/isBasicBearer}}{{#isOAuth}}
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.headers().getFirst("Authorization");
            {{/isOAuth}}


            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}} = this.{{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}.extract(request, {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token){{^isOAuth}};{{/isOAuth}}{{#isOAuth}}{{#vendorExtensions.hasScopes}}
              .<Principal>thenApply((principal) -> { {{#scopes}}
                 if (!principal.scopes().contains("{{scope}}")) throw HttpServerResponseException.of(403, "");{{/scopes}}
                 return principal;
              }){{/vendorExtensions.hasScopes}};{{/isOAuth}}{{/methods}}
            {{#methods}}

            {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}.whenComplete(({{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_principal, {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_error) -> {
                if ({{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_error != null) { future.completeExceptionally({{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_error); }
                else if ({{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_principal != null) { future.complete({{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_principal); }
                else { {{#vendorExtensions.isLast}}
                  future.completeExceptionally(HttpServerResponseException.of(403, ""));{{/vendorExtensions.isLast}}{{^vendorExtensions.isLast}}

{{/vendorExtensions.isLast}}
            {{/methods}}
            {{#methods}}

                }
            });
            {{/methods}}



            return future
              .thenCompose(principal -> {
                if (principal == null) {
                  throw HttpServerResponseException.of(403, "");
                }
                Principal.set(ctx, principal);
                try {
                  return chain.process(ctx, request);
                } catch (Exception e) {
                  throw new CompletionException(e);
                }
              });
        }
    }

    @Tag({{name}}.class)
    @DefaultComponent
    default {{name}}HttpServerInterceptor {{name}}HttpServerInterceptor({{#methods}}
      @Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}.class) HttpServerPrincipalExtractor<{{#isOAuth}}PrincipalWithScopes{{/isOAuth}}{{^isOAuth}}Principal{{/isOAuth}}> {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}{{^vendorExtensions.isLast}},
      {{/vendorExtensions.isLast}}{{/methods}}) {
        return new {{name}}HttpServerInterceptor({{#methods}}{{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}{{^vendorExtensions.isLast}}, {{/vendorExtensions.isLast}}{{/methods}});
    }

{{/vendorExtensions.authMethods}}

}
