/**
 * NOTE: This class is auto generated by Kora OpenAPI Generator (https://openapi-generator.tech) ({{{generatorVersion}}}).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package {{apiPackage}};

import java.util.function.Function;

import ru.tinkoff.kora.common.Context;
import ru.tinkoff.kora.common.DefaultComponent;
import ru.tinkoff.kora.common.Principal;

import ru.tinkoff.kora.config.common.extractor.ConfigValueExtractor;
import ru.tinkoff.kora.config.common.Config;
import ru.tinkoff.kora.http.server.common.HttpServerInterceptor;
import ru.tinkoff.kora.http.server.common.HttpServerInterceptor.InterceptChain;
import ru.tinkoff.kora.http.server.common.HttpServerRequest;
import ru.tinkoff.kora.http.server.common.HttpServerResponse;
import ru.tinkoff.kora.http.server.common.HttpServerResponseException;

import ru.tinkoff.kora.http.common.auth.*;
import ru.tinkoff.kora.http.server.common.auth.*;



@ru.tinkoff.kora.common.annotation.Generated("openapi generator kora server")
@ru.tinkoff.kora.common.Module
public interface ApiSecurity {
{{#vendorExtensions.tags}}

    static final class {{.}} {}
{{/vendorExtensions.tags}}

{{#vendorExtensions.authMethods}}
    @ru.tinkoff.kora.common.annotation.Generated("openapi generator kora server")
    static final class {{name}}HttpServerInterceptor implements HttpServerInterceptor {

    {{#methods}}
        private final HttpServerPrincipalExtractor<{{#isOAuth}}PrincipalWithScopes{{/isOAuth}}{{^isOAuth}}Principal{{/isOAuth}}> {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}};
    {{/methods}}

        public {{name}}HttpServerInterceptor({{#methods}}
            @ru.tinkoff.kora.common.Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}.class) HttpServerPrincipalExtractor<{{#isOAuth}}PrincipalWithScopes{{/isOAuth}}{{^isOAuth}}Principal{{/isOAuth}}> {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}{{^vendorExtensions.isLast}},{{/vendorExtensions.isLast}}{{/methods}}) {
            {{#methods}}
            this.{{#lambda.camelcase}}{{name}}{{/lambda.camelcase}} = {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}};
            {{/methods}}
        }

        @Override
        public HttpServerResponse intercept(Context ctx, HttpServerRequest request, InterceptChain chain) throws Exception {
            {{#methods}}{{#isApiKey}}{{#isKeyInHeader}}
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.headers().getFirst("{{keyParamName}}");{{/isKeyInHeader}}{{#isKeyInQuery}}
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_query = request.queryParams().get("{{keyParamName}}");
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_query == null || {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_query.isEmpty()
              ? null
              : {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_query.iterator().next();{{/isKeyInQuery}}{{#isKeyInCookie}}
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.cookies().stream().filter(c -> "{{keyParamName}}".equals(c.name())).map(c -> c.value()).findFirst().orElse(null);
            {{/isKeyInCookie}}
            {{/isApiKey}}{{#isBasicBasic}}
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.headers().getFirst("Authorization");{{/isBasicBasic}}{{#isBasicBearer}}
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.headers().getFirst("Authorization");{{/isBasicBearer}}{{#isOAuth}}
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token = request.headers().getFirst("Authorization");{{/isOAuth}}
            var {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}} = this.{{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}.extract(request, {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}_token);
            if ({{#lambda.camelcase}}{{name}}{{/lambda.camelcase}} != null) {
{{#isOAuth}}{{#vendorExtensions.hasScopes}}
{{#scopes}}
                 if (!{{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}.scopes().contains("{{scope}}")) {
                    throw HttpServerResponseException.of(403, "Forbidden");
                 }
{{/scopes}}{{/vendorExtensions.hasScopes}}{{/isOAuth}}
                Principal.set(ctx, {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}});
                return chain.process(ctx, request);
            }
{{#vendorExtensions.isLast}}
            throw HttpServerResponseException.of(403, "Forbidden");
{{/vendorExtensions.isLast}}
{{/methods}}
        }
    }

    @ru.tinkoff.kora.common.Tag({{name}}.class)
    @DefaultComponent
    default {{name}}HttpServerInterceptor {{name}}HttpServerAuthInterceptor({{#methods}}
      @ru.tinkoff.kora.common.Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}.class) HttpServerPrincipalExtractor<{{#isOAuth}}PrincipalWithScopes{{/isOAuth}}{{^isOAuth}}Principal{{/isOAuth}}> {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}{{^vendorExtensions.isLast}},{{/vendorExtensions.isLast}}{{/methods}}) {
        return new {{name}}HttpServerInterceptor({{#methods}}{{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}{{^vendorExtensions.isLast}}, {{/vendorExtensions.isLast}}{{/methods}});
    }

{{/vendorExtensions.authMethods}}

}
