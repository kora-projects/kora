/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) ({{{generatorVersion}}}).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package {{package}}

import ru.tinkoff.kora.json.common.annotation.*
import ru.tinkoff.kora.common.annotation.Generated
import ru.tinkoff.kora.common.Component
import com.fasterxml.jackson.core.JsonGenerator


{{#models}}
{{#model}}
{{#vendorExtensions.x-enable-validation}}import ru.tinkoff.kora.validation.common.annotation.*{{/vendorExtensions.x-enable-validation}}
{{#isEnum}}
{{>kotlinEnumClass}}
{{/isEnum}}
{{^isEnum}}

{{#discriminator}}
/**
 * {{#description}}{{.}}{{/description}}{{^description}}{{classname}}{{/description}}
 */
@Generated("openapi generator kora kotlin")
@Json
@JsonDiscriminatorField("{{{propertyBaseName}}}")
sealed interface {{classname}} {
{{#allVars}}{{^isDiscriminator}}
  /**
   * {{#description}}{{.}}{{/description}}{{^description}}name{{/description}}
   */
  val {{name}}: {{{datatypeWithEnum}}}{{^required}}?{{/required}}
{{/isDiscriminator}}{{/allVars}}
}
{{/discriminator}}
{{^discriminator}}
/**
 * {{#description}}{{.}}{{/description}}{{^description}}{{classname}}{{/description}}{{#allVars}}
 * @param {{name}} {{#description}}{{.}}{{/description}}{{^description}}{{name}}{{/description}}{{/allVars}}
 */
@Generated("openapi generator kora kotlin")
@JsonWriter
{{#vendorExtensions.x-discriminator-value}}@JsonDiscriminatorValue(value = {{{vendorExtensions.x-discriminator-value}}}){{/vendorExtensions.x-discriminator-value}}
{{#vendorExtensions.x-enable-validation}}@Valid{{/vendorExtensions.x-enable-validation}}
{{#hasVars}}data {{/hasVars}}class {{classname}} @JsonReader constructor (
{{#requiredVars}}
  @JsonField("{{baseName}}")
  {{#vendorExtensions.x-has-min-max}}@Range(from = {{minimum}}.toDouble(), to = {{maximum}}.toDouble(), boundary = Range.Boundary.{{#exclusiveMinimum}}EXCLUSIVE{{/exclusiveMinimum}}{{^exclusiveMinimum}}INCLUSIVE{{/exclusiveMinimum}}_{{#exclusiveMaximum}}EXCLUSIVE{{/exclusiveMaximum}}{{^exclusiveMaximum}}INCLUSIVE{{/exclusiveMaximum}})
  {{/vendorExtensions.x-has-min-max}}{{#vendorExtensions.x-has-min-max-items}}@Size(min = {{minItems}}, max = {{maxItems}})
  {{/vendorExtensions.x-has-min-max-items}}{{#vendorExtensions.x-has-min-max-length}}@Size(min = {{minLength}}, max = {{maxLength}})
  {{/vendorExtensions.x-has-min-max-length}}{{#vendorExtensions.x-has-pattern}}@Pattern("{{{pattern}}}")
  {{/vendorExtensions.x-has-pattern}}{{#vendorExtensions.x-has-valid-model}}@Valid
  {{/vendorExtensions.x-has-valid-model}}
{{^isDiscriminator}}{{#isOverridden}}override {{/isOverridden}}{{/isDiscriminator}}val {{name}}: {{{datatypeWithEnum}}}{{^-last}},{{/-last}}{{#-last}}{{#hasOptional}},{{/hasOptional}}{{/-last}}
{{/requiredVars}}{{#optionalVars}}
  @JsonField("{{baseName}}")
  {{#vendorExtensions.x-has-min-max}}@Range(from = {{minimum}}.toDouble(), to = {{maximum}}.toDouble(), boundary = Range.Boundary.{{#exclusiveMinimum}}EXCLUSIVE{{/exclusiveMinimum}}{{^exclusiveMinimum}}INCLUSIVE{{/exclusiveMinimum}}_{{#exclusiveMaximum}}EXCLUSIVE{{/exclusiveMaximum}}{{^exclusiveMaximum}}INCLUSIVE{{/exclusiveMaximum}})
  {{/vendorExtensions.x-has-min-max}}{{#vendorExtensions.x-has-min-max-items}}@Size(min = {{minItems}}, max = {{maxItems}})
  {{/vendorExtensions.x-has-min-max-items}}{{#vendorExtensions.x-has-min-max-length}}@Size(min = {{minLength}}, max = {{maxLength}})
  {{/vendorExtensions.x-has-min-max-length}}{{#vendorExtensions.x-has-pattern}}@Pattern("{{{pattern}}}")
  {{/vendorExtensions.x-has-pattern}}{{#vendorExtensions.x-has-valid-model}}@Valid
  {{/vendorExtensions.x-has-valid-model}}
{{^isDiscriminator}}{{#isOverridden}}override {{/isOverridden}}{{/isDiscriminator}}val {{name}}: {{{datatypeWithEnum}}}? = null{{^-last}},{{/-last}}
{{/optionalVars}}){{#vendorExtensions.x-discriminator-value}} : {{parent}} {{/vendorExtensions.x-discriminator-value}}{
{{#vendorExtensions.x-discriminator-constant}}

  companion object {
    val DISCRIMINATOR: String = {{{vendorExtensions.x-discriminator-constant}}}
  }
{{/vendorExtensions.x-discriminator-constant}}
{{#vendorExtensions.x-discriminator-constants}}

    {{#vendorExtensions.formParamMappers}}
    private ru.tinkoff.kora.http.client.common.writer.StringParameterConverter<{{paramType}}> {{paramName}}Converter;
    {{/vendorExtensions.formParamMappers}}

  companion object {
    val DISCRIMINATORS: List<String> = listOf({{{vendorExtensions.x-discriminator-constants}}})
    {{#vendorExtensions.x-discriminator-constant-fields}}
    val DISCRIMINATOR_{{discriminatorField}}: String = {{{discriminatorValue}}}
    {{/vendorExtensions.x-discriminator-constant-fields}}
  }
{{/vendorExtensions.x-discriminator-constants}}

{{#vendorExtensions.x-discriminator-values-check}}
  init {
    if {{{vendorExtensions.x-discriminator-values-check}}} {
      throw IllegalStateException("Invalid discriminator value");
    }
  }
{{/vendorExtensions.x-discriminator-values-check}}



  {{#allVars}}
      {{#isEnum}}
      {{^isContainer}}
  {{>kotlinEnumClass}}
      {{/isContainer}}
      {{#isContainer}}
      {{#mostInnerItems}}
  {{>kotlinEnumClass}}
      {{/mostInnerItems}}
      {{/isContainer}}
      {{/isEnum}}
  {{/allVars}}
}

{{/discriminator}}
{{/isEnum}}
{{/model}}
{{/models}}

