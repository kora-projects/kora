package {{package}}

import ru.tinkoff.kora.http.client.common.response.HttpClientResponse
import ru.tinkoff.kora.http.client.common.response.HttpClientResponseMapper
import {{package}}.{{classname}}Responses.*

import java.util.concurrent.CompletionStage
import java.util.concurrent.CompletableFuture

{{#imports}}import {{import}}
{{/imports}}

@ru.tinkoff.kora.common.annotation.Generated("openapi generator kora client"){{#discriminator}}{{>typeInfoAnnotation}}{{/discriminator}}
interface {{classname}}ClientResponseMappers {
{{#operations}}
{{#operation}}
  {{#responses}}
  @ru.tinkoff.kora.common.annotation.Generated("openapi generator kora client")
  class {{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}{{code}}ApiResponseMapper(
    {{#dataType}}
    {{#vendorExtensions.hasMapperTag}}@param:{{vendorExtensions.mapperTag}}{{/vendorExtensions.hasMapperTag}}
    private val delegate: HttpClientResponseMapper<CompletionStage<{{{dataType}}}>>
    {{/dataType}}
  ) : HttpClientResponseMapper<CompletionStage<{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}ApiResponse>> {

    override fun apply(response: HttpClientResponse): CompletionStage<{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}ApiResponse> {
      {{#headers}}
      val {{#lambda.camelcase}}{{nameInCamelCase}}{{/lambda.camelcase}} = response.headers().getFirst("{{baseName}}"){{#required}}!!{{/required}}
      {{/headers}}
      {{^dataType}}
      return CompletableFuture.completedFuture({{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}ApiResponse{{^vendorExtensions.singleResponse}}.{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}{{#isDefault}}Default{{/isDefault}}{{^isDefault}}{{code}}{{/isDefault}}ApiResponse{{/vendorExtensions.singleResponse}}(
        {{#isDefault}}response.code(){{#hasHeaders}}, {{/hasHeaders}}{{/isDefault}}
        {{#headers}}{{#lambda.camelcase}}{{nameInCamelCase}}{{/lambda.camelcase}}{{^-last}},{{/-last}}{{/headers}}
      ))
      {{/dataType}}
      {{#dataType}}
      return this.delegate.apply(response)
        .thenApply { content -> {{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}ApiResponse{{^vendorExtensions.singleResponse}}.{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}{{#isDefault}}Default{{/isDefault}}{{^isDefault}}{{code}}{{/isDefault}}ApiResponse{{/vendorExtensions.singleResponse}}(
          {{#isDefault}}response.code(), {{/isDefault}}
          content{{#hasHeaders}}, {{/hasHeaders}}
          {{#headers}}{{#lambda.camelcase}}{{nameInCamelCase}}{{/lambda.camelcase}}{{^-last}}, {{/-last}}{{/headers}}
        ) }
      {{/dataType}}
    }
  }

  {{/responses}}
{{/operation}}
{{/operations}}
}
