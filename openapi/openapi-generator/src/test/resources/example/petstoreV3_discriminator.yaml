openapi: 3.0.3

info:
  title: Petstore with discriminator
  version: 1.0.0

paths:
  /pets:
    patch:
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Updated

components:
  schemas:
    DeliveryAllOf:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/DeliveryTypeEnum'
      discriminator:
        propertyName: type
        mapping:
          SPB: '#/components/schemas/DeliveryAllOfBig'
          MSK: '#/components/schemas/DeliveryAllOfBig'

    DeliveryAllOfBig:
      type: object
      allOf:
        - $ref: '#/components/schemas/DeliveryAllOf'
        - type: object
          properties:
            contractName:
              type: string

    DeliverySimple:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/DeliveryTypeEnum'
      discriminator:
        propertyName: type
        mapping:
          SPB: '#/components/schemas/DeliverySimpleBig'
          MSK: '#/components/schemas/DeliverySimpleBig'

    DeliverySimpleBig:
      type: object
      properties:
        contractName:
          type: string
        type:
          $ref: '#/components/schemas/DeliveryTypeEnum'

    DeliverySingle:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/DeliveryTypeEnum'
      discriminator:
        propertyName: type
        mapping:
          MSK: '#/components/schemas/DeliverySingleBig'

    DeliverySingleBig:
      type: object
      allOf:
        - $ref: '#/components/schemas/DeliverySingle'
        - type: object
          properties:
            contractName:
              type: string

    ParcelAllOf:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
      discriminator:
        propertyName: type
        mapping:
          SOCHI: '#/components/schemas/ParcelAllOfBig'

    ParcelAllOfBig:
      type: object
      allOf:
        - $ref: '#/components/schemas/ParcelAllOf'
        - type: object
          properties:
            contractName:
              type: string

    ParcelOneOf:
      oneOf:
        - $ref: '#/components/schemas/ParcelOneOfSmall'
        - $ref: '#/components/schemas/ParcelOneOfBig'
      discriminator:
        propertyName: type
        mapping:
          SMALL: '#/components/schemas/ParcelOneOfSmall'
          BIG: '#/components/schemas/ParcelOneOfBig'

    ParcelOneOfSmall:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
          format: uuid

    ParcelOneOfBig:
      type: object
      properties:
        type:
          type: string
        contractName:
          type: string

# int/boolean not supported in JsonDiscriminator
#    ResponseData:
#      type: object
#      properties:
#        status:
#          type: boolean
#      discriminator:
#        propertyName: status
#        mapping:
#          true: '#/components/schemas/ResponseDataSuccess'
#          false: '#/components/schemas/ResponseDataError'
#
#    ResponseDataSuccess:
#      type: object
#      properties:
#        message:
#          type: string
#
#    ResponseDataError:
#      type: object
#      properties:
#        code:
#          type: int

    DeliveryTypeEnum:
      type: string
      enum:
        - SPB
        - MSK

    ValidationErrorDto:
      title: ValidationErrorDto
      type: object
      required:
        - fieldRequired
        - fieldRequiredNullable
        - fieldRequiredNonNullable
      properties:
        type:
          type: string
        fieldRequired:
          type: string
          example: 123
        fieldNullable:
          type: string
          nullable: true
          example: 123
        fieldRequiredNullable:
          type: string
          nullable: true
          example: 123
        fieldRequiredNonNullable:
          type: string
          example: 123
      discriminator:
        propertyName: type
        mapping:
          'Block.Error1': '#/components/schemas/ValidationErrorDtoBlock'
          'Block.Error2': '#/components/schemas/ValidationErrorDtoBlock'
          'Prop.Error': '#/components/schemas/ValidationErrorDtoProp'

    ValidationErrorDtoProp:
      title: PropValidationErrorDto
      allOf:
        - $ref: '#/components/schemas/ValidationErrorDto'
        - type: object
          properties:
            type:
              type: string

    ValidationErrorDtoBlock:
      title: PropValidationErrorDto
      allOf:
        - $ref: '#/components/schemas/ValidationErrorDto'
        - type: object
          properties:
            type:
              type: string
            key:
              type: integer

    Pet:
      type: object
      required:
        - pet_type
      properties:
        pet_type:
          type: string
      discriminator:
        propertyName: pet_type
    PetDog: # "Dog" is a value for the pet_type property (the discriminator value)
      allOf: # Combines the main `Pet` schema with `Dog`-specific properties
        - $ref: '#/components/schemas/Pet'
        - type: object
          # all other properties specific to a `Dog`
          properties:
            bark:
              type: boolean
            breed:
              type: string
              enum: [ Dingo, Husky, Retriever, Shepherd ]
            int-breed:
              description: "enum with int value"
              type: int
              enum: [ 5, 7, 8, 10 ]
    PetCat: # "Cat" is a value for the pet_type property (the discriminator value)
      allOf: # Combines the main `Pet` schema with `Cat`-specific properties
        - $ref: '#/components/schemas/Pet'
        - type: object
          # all other properties specific to a `Cat`
          properties:
            hunts:
              type: boolean
            age:
              type: integer
    PetCommon: # "Cat" is a value for the pet_type property (the discriminator value)
      allOf: # Combines the main `Pet` schema with `Cat`-specific properties
        - $ref: '#/components/schemas/Pet'
