dependencies {
    api libs.slf4j.api
    api(libs.openapi.generator) {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.datatype', module: 'jackson-datatype-jsr310'
        exclude group: 'com.fasterxml.jackson.datatype', module: 'jackson-datatype-guava'
        exclude group: 'com.fasterxml.jackson.datatype', module: 'jackson-datatype-joda'
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-yaml'
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'com.github.ben-manes.caffeine', module: 'caffeine'
        exclude group: 'commons-codec', module: 'commons-codec'
        exclude group: 'commons-io', module: 'commons-io'
    }
    api("com.fasterxml.jackson.datatype:jackson-datatype-guava:${libs.versions.jackson.get()}")
    api("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${libs.versions.jackson.get()}")
    api("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${libs.versions.jackson.get()}")

    implementation libs.caffeine
    implementation libs.commons.codec
    implementation libs.commons.io
    implementation libs.translit.icu4j

    testImplementation(libs.swagger.annotations)
    testImplementation(project(":json:json-common"))
    testImplementation(project(":json:jackson-module"))
    testImplementation(project(":json:json-annotation-processor"))
    testImplementation(project(":json:json-symbol-processor"))
    testImplementation(project(":http:http-client-common"))
    testImplementation(project(":http:http-client-annotation-processor"))
    testImplementation(project(":http:http-client-symbol-processor"))
    testImplementation(project(":http:http-server-common"))
    testImplementation(project(":http:http-server-annotation-processor"))
    testImplementation(project(":http:http-server-symbol-processor"))
    testImplementation(project(":validation:validation-module"))
    testImplementation(project(":validation:validation-annotation-processor"))
    testImplementation(project(":validation:validation-symbol-processor"))
    testImplementation(project(":aop:aop-annotation-processor"))
    testImplementation(testFixtures(project(":annotation-processor-common")))
    testImplementation(project(":aop:aop-symbol-processor"))
    testImplementation(testFixtures(project(":symbol-processor-common")))

    testImplementation libs.reactor.core
    testImplementation(libs.kotlin.compiler)
    testImplementation(libs.kotlin.stdlib.lib)
    testImplementation(libs.kotlin.coroutines.reactor)
}


sourceSets {
    testGenerated {
        java {
            def addOpenapiDir = { String path ->
                java.srcDirs += project.file("build/out/$path/java-client")
                java.srcDirs += project.file("build/out/$path/java-server")
                java.srcDirs += project.file("build/out/$path/java-reactive-client")
                java.srcDirs += project.file("build/out/$path/java-reactive-server")
                java.srcDirs += project.file("build/out/$path/java-async-client")
                java.srcDirs += project.file("build/out/$path/java-async-server")
                pluginManager.withPlugin("org.jetbrains.kotlin.jvm") {
                    kotlin {
                        sourceSets {
                            testGenerated {
                                kotlin.srcDir("build/out/$path/kotlin-client")
                                kotlin.srcDir("build/out/$path/kotlin-server")
                                kotlin.srcDir("build/out/$path/kotlin-suspend-client")
                                kotlin.srcDir("build/out/$path/kotlin-suspend-server")
                            }
                        }
                    }
                }
            }
            addOpenapiDir("petstoreV2")
            addOpenapiDir("petstoreV2_implicit_headers")
            addOpenapiDir("petstoreV2_implicit_headers_regex")
            addOpenapiDir("petstoreV2_server_request")
            addOpenapiDir("petstoreV3")
            addOpenapiDir("petstoreV3_implicit_headers")
            addOpenapiDir("petstoreV3_implicit_headers_regex")
            addOpenapiDir("petstoreV3_server_request")
            addOpenapiDir("petstoreV3_additional_props")
            addOpenapiDir("petstoreV3_discriminator")
            addOpenapiDir("petstoreV3_discriminator_enable_json_nullable")
            addOpenapiDir("petstoreV3_default_delegate")
            addOpenapiDir("petstoreV3_enum")
            addOpenapiDir("petstoreV3_filter")
            addOpenapiDir("petstoreV3_form")
            addOpenapiDir("petstoreV3_nullable")
            addOpenapiDir("petstoreV3_request_parameters")
            addOpenapiDir("petstoreV3_security_all")
            addOpenapiDir("petstoreV3_security_api_key")
            addOpenapiDir("petstoreV3_security_basic")
            addOpenapiDir("petstoreV3_security_bearer")
            addOpenapiDir("petstoreV3_security_oauth")
            addOpenapiDir("petstoreV3_security_cookie")
            addOpenapiDir("petstoreV3_single_response")
            addOpenapiDir("petstoreV3_types")
            addOpenapiDir("petstoreV3_validation")
        }
    }
}

apply from: "${project.rootDir}/gradle/kotlin-plugin.gradle"
apply from: "${project.rootDir}/gradle/in-test-generated.gradle"
