import java.nio.file.Files

dependencies {
    api project(":annotation-processor-common")
    implementation libs.jackson.core

    testImplementation testFixtures(project(":annotation-processor-common"))
}

apply from: "${project.rootDir}/gradle/in-test-generated.gradle"


sourceSets {
    main {
        resources {
            srcDirs "build/kora-hints"
        }
    }
}

project.tasks.register("copyHints", Copy) {
    def counter = 0
    from("..") {
        includeEmptyDirs = false
        include "/**/src/main/resources/kora-module-hints.json"
        exclude "**/build/**/*"
        rename {
            counter++
            return "module-hint-" + counter + ".json"
        }
        eachFile {
            path = name
        }
    }
    into "build/kora-hints/parts"
}


project.tasks.register("buildHints") {
    it.dependsOn("copyHints")
    it.outputs.file("build/kora-hints/kora-hints.json")
    it.inputs.dir("build/kora-hints/parts")
    doLast {
        def list = new ArrayList<>()
        fileTree(dir: "build/kora-hints/parts", include: "*.json").visit {
            def result = new groovy.json.JsonSlurper().parseText(it.file.text)
            list.addAll(result)
        }
        def json = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(list))
        def resultFile = project.file("build/kora-hints/kora-hints.json")
        if (resultFile.exists()) {
            if (resultFile.text == json) {
                return
            }
            resultFile.delete()
        }

        Files.createDirectories(resultFile.parentFile.toPath())
        resultFile.createNewFile()
        resultFile.text = json
    }
}

processResources.dependsOn("buildHints")
compileJava.dependsOn("buildHints")
sourcesJar.dependsOn("buildHints")
