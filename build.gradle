plugins {
    id "org.jetbrains.kotlin.jvm" version "1.9.10" apply false
    id 'jacoco'
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

allprojects {
    group = "ru.tinkoff.kora"
    version = System.getenv().getOrDefault("KORA_VERSION", "1.1.0-SNAPSHOT")
    repositories {
        mavenCentral()
    }
}

// config libraries
subprojects {
    if (!project.childProjects.isEmpty() || project.name == 'maven-parent') {
        return
    }
    apply plugin: 'java-library'
    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    tasks.withType(JavaCompile).configureEach {
        options.encoding("UTF-8")
        options.debug = true
        options.compilerArgs << '-parameters' << '-Xlint:all' << '-Xlint:-serial,-processing' << '-XprintRounds'
    }
}

// config test libraries
subprojects {
    if (project.parent.name != "internal") {
        return
    }
    dependencies {
        api libs.junit.platform.launcher
        api libs.junit.jupiter
    }
}

// config experimental libraries
subprojects {
    if (project.parent.name != "experimental") {
        return
    }

    group = "ru.tinkoff.kora.experimental"
    dependencies {
        implementation libs.jetbrains.annotations
    }
}

subprojects {
    if (childProjects.isEmpty()) {
        if (!file('src/main/java/module-info.java').exists()) {
            tasks.withType(Jar).configureEach {
                manifest {
                    attributes('Automatic-Module-Name': 'kora.' + project.name.replace('-', '.'))
                }
            }
        }
    }
}

def isPublishedLibrary = { Project p ->
    if (!p.childProjects.isEmpty()) {
        return false
    }
    if (p.parent.name == "internal") {
        return false
    }
    if (p.name == "maven-parent") {
        return false
    }
    return true
}
subprojects {
    def versions = libs.versions
    configurations {
        configureEach {
            resolutionStrategy.force "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson.get()}"
            resolutionStrategy.force "com.fasterxml.jackson.core:jackson-core:${versions.jackson.get()}"
            resolutionStrategy.force "com.fasterxml.jackson.core:jackson-databind:${versions.jackson.get()}"
            resolutionStrategy.force "io.netty:netty-buffer:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-codec:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-codec-dns:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-codec-http2:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-codec-http:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-codec-socks:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-codec-common:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-handler:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-handler-proxy:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-resolver:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-resolver-dns:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-resolver-dns-classes-macos:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-transport:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-transport-clasess-epoll:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-transport-clasess-kqueue:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-transport-native-epoll:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-transport-native-kqueue:${versions.netty.get()}"
            resolutionStrategy.force "io.netty:netty-transport-unix-common:${versions.netty.get()}"
            resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin.get().get()}"
            resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin.get().get()}"
            resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin.get().get()}"
        }
    }
}

def cleanPublishDir = tasks.register('cleanPublishDir', Delete) {
    delete(project.rootProject.layout.buildDirectory.dir("publishing-repository"))
    group = 'publishing'
}

def createPublishArchive = tasks.register("createPublishArchive", Zip) {
    from(rootProject.layout.buildDirectory.dir("publishing-repository"))
    include('*/**')
    exclude('*/**/maven-metadata.*')
    group = 'publishing'
    getArchiveFile().set(rootProject.layout.buildDirectory.file('deployment.zip'))
}

tasks.register('uploadPublishArchive', ru.tinkoff.kora.gradle.SonatypePublishTask) {
    dependsOn(createPublishArchive)
    archive = rootProject.layout.buildDirectory.file('deployment.zip')
    username = System.getenv().getOrDefault("REPO_USER", "")
    password = System.getenv().getOrDefault("REPO_PASSWORD", "")
}

// config published libraries
subprojects {
    if (!isPublishedLibrary(it)) {
        return
    }
    def currentProject = it

    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'signing'

    test {
        jacoco {
            enabled = false
        }
    }

    javadoc {
        options.encoding = "UTF-8"
        options.addBooleanOption("html5", true)
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                if (currentProject.plugins.hasPlugin(JavaTestFixturesPlugin)) {
                    components.java.withVariantsFromConfiguration(configurations.testFixturesApiElements) { skip() }
                    components.java.withVariantsFromConfiguration(configurations.testFixturesRuntimeElements) { skip() }
                    suppressPomMetadataWarningsFor('testFixturesApiElements')
                    suppressPomMetadataWarningsFor('testFixturesRuntimeElements')
                }
                from components.java
                pom {
                    afterEvaluate {
                        name = project.name
                        description = "Kora $project.name module"
                    }
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'https://github.com/kora-projects/kora/blob/master/LICENSE'
                        }
                    }
                    scm {
                        url = 'https://github.com/kora-projects/kora'
                        connection = 'scm:git:git@github.com/kora-projects/kora.git'
                        developerConnection = 'scm:git:git@github.com/kora-projects/kora.git'
                    }
                    url = 'https://github.com/kora-projects/kora'
                    developers {
                        developer {
                            id = 'a.otts'
                            name = 'Aleksei Otts'
                            email = 'eld0727@mail.ru'
                        }
                        developer {
                            id = 'a.duyun'
                            name = 'Anton Duyun'
                            email = 'anton.duyun@gmail.com'
                        }
                        developer {
                            id = 'a.kurako'
                            name = 'Anton Kurako'
                            email = 'goodforgod.dev@gmail.com'
                        }
                        developer {
                            id = 'a.yakovlev'
                            name = 'Artem Yakovlev'
                            email = 'jakart89@gmail.com'
                        }
                    }

                    withXml { pom ->
                        def xpf = javax.xml.xpath.XPathFactory.newInstance()
                        def xp = xpf.newXPath()
                        def xpath = xp.compile("//dependency[optional[contains(text(), 'true')]]")
                        def nl = (org.w3c.dom.NodeList) xpath.evaluate(pom.asElement(), javax.xml.xpath.XPathConstants.NODESET);
                        for (int i = nl.getLength() - 1; i >= 0; i--) {
                            nl.item(i).getParentNode().removeChild(nl.item(i))
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = 'build'
                url = project.rootProject.layout.buildDirectory.dir("publishing-repository")
            }
            maven {
                name = 'snapshot'
                url = uri('https://central.sonatype.com/repository/maven-snapshots/')
                credentials {
                    username = System.getenv().getOrDefault("REPO_USER", "")
                    password = System.getenv().getOrDefault("REPO_PASSWORD", "")
                }
            }
        }
    }
    def publishTask = it.tasks.named('publishMavenPublicationToBuildRepository')
    publishTask.configure {
        it.dependsOn(cleanPublishDir)
    }
    createPublishArchive.configure {
        it.dependsOn(publishTask)
    }

    signing {
        required = false
        sign publishing.publications.maven
    }

    test {
        jvmArgs([
            '-XX:FlightRecorderOptions=stackdepth=1024',
            '--enable-preview',
            '--add-opens', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-opens', 'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-opens', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-opens', 'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-opens', 'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-opens', 'jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED',
            '--add-opens', 'jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-opens', 'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
            '--add-opens', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        ])
        useJUnitPlatform()
        testLogging {
            showStandardStreams(false)
            events("passed", "skipped", "failed")
            exceptionFormat("full")
        }
        finalizedBy jacocoTestReport // report is always generated after tests run
    }

    dependencies {
        api libs.jakarta.annotations

        testImplementation project(":internal:test-logging")
        testImplementation libs.junit.jupiter
        testImplementation libs.mockito.core
        testImplementation libs.assertj
    }

    tasks.register("allDeps", DependencyReportTask)
}

apply from: "${project.rootDir}/gradle/ci-tests.gradle"
